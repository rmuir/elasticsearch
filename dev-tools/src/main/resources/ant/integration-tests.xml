<?xml version="1.0"?>
<project name="elasticsearch-integration-tests">

  <!-- this is all to not run tests for 'pom' packaging. maven you fail -->
  <condition property="shouldskip">
    <istrue value="${skip.integ.tests}"/>
  </condition>

  <!-- our pid file for easy cleanup -->
  <property name="integ.pidfile" location="${integ.scratch}/es.pid"/>

  <!-- if this exists, ES is running (maybe) -->
  <available property="integ.pidfile.exists" file="${integ.pidfile}"/>

  <!-- arguments passed to elasticsearch when running -->
  <property name="integ.args"
            value="-Des.node.name=smoke_tester -Des.cluster.name=prepare_release
                   -Des.discovery.zen.ping.multicast.enabled=false -Des.script.inline=on
                   -Des.script.indexed=on -Des.pidfile=${integ.pidfile} -Des.repositories.url.allowed_urls=http://snapshot.test*"/>

  <!-- runs an OS script -->
  <macrodef name="run-script">
      <attribute name="script"/>
      <attribute name="dir"/>
      <attribute name="args"/>
      <attribute name="spawn" default="false"/>
      <element name="nested" optional="true"/>
    <sequential>
      <local name="failonerror"/>
      <condition property="failonerror">
          <isfalse value="@{spawn}"/>
      </condition>

      <exec executable="cmd" osfamily="winnt" dir="@{dir}" failonerror="${failonerror}" spawn="@{spawn}">
        <arg value="/c"/>
        <arg value="@{dir}/@{script}.bat"/>
        <arg line="@{args}"/>
        <nested/>
      </exec>

      <exec executable="sh" osfamily="unix" dir="@{dir}" failonerror="${failonerror}" spawn="@{spawn}">
        <arg value="@{dir}/@{script}"/>
        <arg line="@{args}"/>
        <nested/>
      </exec>
    </sequential>
  </macrodef>

  <!-- extracts PID from file -->
  <macrodef name="extract-pid">
      <attribute name="property"/>
    <sequential>
      <loadfile srcFile="${integ.pidfile}" property="@{property}">
        <filterchain>
          <striplinebreaks/>
        </filterchain>
      </loadfile>
    </sequential>
  </macrodef>

  <!-- applies transformations to src and stores in dst -->
  <macrodef name="filter-property">
      <attribute name="src"/>
      <attribute name="dest"/>
      <element name="chain"/>
    <sequential>
      <loadresource property="@{dest}">
        <propertyresource name="@{src}"/>
        <filterchain>
          <tokenfilter>
            <chain/>
          </tokenfilter>
        </filterchain>
      </loadresource>
    </sequential>
  </macrodef>

  <!-- installs a plugin into elasticsearch -->
  <macrodef name="install-plugin">
      <attribute name="home" default="${integ.scratch}/elasticsearch-${elasticsearch.version}"/>
      <attribute name="name"/>
      <attribute name="file"/>
    <sequential>
      <local name="url"/>
      <makeurl property="url" file="@{file}"/>

      <!-- install plugin -->
      <echo>Installing plugin @{name}...</echo>
      <run-script dir="@{home}" script="bin/plugin" args="-u ${url} -i @{name}"/>

      <!-- check that plugin was installed into correct place -->
      <local name="longname"/>
      <property name="longname" value="@{name}"/>
      <local name="shortname"/>
      <filter-property src="longname" dest="shortname">
        <chain>
          <replaceregex pattern="^elasticsearch-" replace=""/>
        </chain>
      </filter-property>

      <fail message="did not find plugin installed as ${shortname}">
        <condition>
          <not>
            <resourceexists>
              <file file="@{home}/plugins/${shortname}"/>
            </resourceexists>
          </not>
        </condition>
      </fail>
    </sequential>
  </macrodef>

  <!-- start elasticsearch and wait until its ready -->
  <macrodef name="startup-elasticsearch">
      <attribute name="home" default="${integ.scratch}/elasticsearch-${elasticsearch.version}"/>
      <attribute name="args" default="${integ.args}"/>
    <sequential>
      <echo>Starting up external cluster...</echo>
      <run-script dir="@{home}" script="bin/elasticsearch" spawn="true"
                  args="@{args} -Des.path.repo=@{home}/repo" />

      <waitfor maxwait="3" maxwaitunit="minute" checkevery="500">
        <http url="http://127.0.0.1:9200"/>
      </waitfor>

      <local name="integ.pid"/>
      <extract-pid property="integ.pid"/>
      <echo>External cluster started PID ${integ.pid}</echo>
    </sequential>
  </macrodef>

  <!-- unzip the elasticsearch zip -->
  <target name="setup-workspace" depends="stop-external-cluster" unless="${shouldskip}">
    <sequential>
      <delete dir="${integ.scratch}"/>
      <unzip src="${integ.deps}/elasticsearch-${elasticsearch.version}.zip" dest="${integ.scratch}"/>
    </sequential>
  </target>

  <!-- run elasticsearch in the foreground (for debugging etc) -->
  <!-- TODO: doesn't belong here, but we will figure it out -->
  <target name="start-foreground" depends="stop-external-cluster">
      <delete dir="${integ.scratch}"/>
      <unzip src="${project.build.directory}/releases/${project.artifactId}-${project.version}.zip" dest="${integ.scratch}"/>
      <local name="home"/>
      <property name="home" location="${integ.scratch}/elasticsearch-${elasticsearch.version}"/>
      <run-script dir="${home}" script="bin/elasticsearch" spawn="false"
                  args="${integ.args} -Des.path.repo=${home}/repo">
        <nested>
          <env key="JAVA_OPTS" value="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000"/>
        </nested>
      </run-script>
  </target>

  <!-- unzip core release artifact and start ES -->
  <target name="start-external-cluster" depends="setup-workspace" unless="${shouldskip}">
    <startup-elasticsearch/>
  </target>

  <!-- unzip core release artifact, install plugin, then start ES -->
  <target name="start-external-cluster-with-plugin" depends="setup-workspace" unless="${shouldskip}">
    <install-plugin name="${project.artifactId}" file="${project.build.directory}/releases/${project.artifactId}-${project.version}.zip"/>
    <startup-elasticsearch/>
  </target>

  <!-- TODO, for some more safety, add back some of the old jps logic
       and verify the pid is really an ES process! (fail otherwise) -->
  <target name="stop-external-cluster" if="integ.pidfile.exists">
    <local name="integ.pid"/>

    <extract-pid property="integ.pid"/>
    <echo>Shutting down external cluster PID ${integ.pid}</echo>

    <exec executable="taskkill" failonerror="true" osfamily="winnt">
      <arg value="/F"/>
      <arg value="/PID"/>
      <arg value="${integ.pid}"/>
    </exec>
    <exec executable="kill" failonerror="true" osfamily="unix">
      <arg value="-9"/>
      <arg value="${integ.pid}"/>
    </exec>
    <delete file="${integ.pidfile}"/>
  </target>

</project>
