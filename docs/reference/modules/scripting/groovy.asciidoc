[[modules-scripting-groovy]]
== Groovy Scripting Language

.Groovy dynamic scripting off by default from v1.4.3
[IMPORTANT]
===================================================

Groovy dynamic scripting is off by default. This prevents Groovy scripts
from being accepted as part of a request or retrieved from the
`.scripts` index. You can still use Groovy file scripts stored in
the `config/scripts/` directory on every node.

To convert an inline script to a file-based script, save the contents
of the `inline` field to a file with the `.groovy` extension and
store it in the `config/scripts` directory on every data node in your
cluster.

For example, if you have the following inline script:

[source,js]
-----------------------------------
GET /_search
{
    "script_fields": {
        "my_field": {
            "inline": "1 + my_var",
            "params": {
              "my_var": 2
            }
        }
    }
}
-----------------------------------

Save `1 + my_var` in a file called `config/scripts/my_script.groovy`.

To use the script in a request, specify its name (without the `.groovy` extension) in the `file` field:

[source,js]
-----------------------------------
GET /_search
{
    "script_fields": {
        "my_field": {
            "script": {
                "file": "my_script",
                "params": {
                    "my_var": 2
                }
            }
        }
    }
}
-----------------------------------

===================================================

[float]
=== Groovy Built In Functions

There are several built in functions that can be used within scripts.
They include:

[cols="<,<",options="header",]
|=======================================================================
|Function |Description
|`sin(a)` |Returns the trigonometric sine of an angle.

|`cos(a)` |Returns the trigonometric cosine of an angle.

|`tan(a)` |Returns the trigonometric tangent of an angle.

|`asin(a)` |Returns the arc sine of a value.

|`acos(a)` |Returns the arc cosine of a value.

|`atan(a)` |Returns the arc tangent of a value.

|`toRadians(angdeg)` |Converts an angle measured in degrees to an
approximately equivalent angle measured in radians

|`toDegrees(angrad)` |Converts an angle measured in radians to an
approximately equivalent angle measured in degrees.

|`exp(a)` |Returns Euler's number _e_ raised to the power of value.

|`log(a)` |Returns the natural logarithm (base _e_) of a value.

|`log10(a)` |Returns the base 10 logarithm of a value.

|`sqrt(a)` |Returns the correctly rounded positive square root of a
value.

|`cbrt(a)` |Returns the cube root of a double value.

|`IEEEremainder(f1, f2)` |Computes the remainder operation on two
arguments as prescribed by the IEEE 754 standard.

|`ceil(a)` |Returns the smallest (closest to negative infinity) value
that is greater than or equal to the argument and is equal to a
mathematical integer.

|`floor(a)` |Returns the largest (closest to positive infinity) value
that is less than or equal to the argument and is equal to a
mathematical integer.

|`rint(a)` |Returns the value that is closest in value to the argument
and is equal to a mathematical integer.

|`atan2(y, x)` |Returns the angle _theta_ from the conversion of
rectangular coordinates (_x_, _y_) to polar coordinates (r,_theta_).

|`pow(a, b)` |Returns the value of the first argument raised to the
power of the second argument.

|`round(a)` |Returns the closest _int_ to the argument.

|`random()` |Returns a random _double_ value.

|`abs(a)` |Returns the absolute value of a value.

|`max(a, b)` |Returns the greater of two values.

|`min(a, b)` |Returns the smaller of two values.

|`ulp(d)` |Returns the size of an ulp of the argument.

|`signum(d)` |Returns the signum function of the argument.

|`sinh(x)` |Returns the hyperbolic sine of a value.

|`cosh(x)` |Returns the hyperbolic cosine of a value.

|`tanh(x)` |Returns the hyperbolic tangent of a value.

|`hypot(x, y)` |Returns sqrt(_x2_ + _y2_) without intermediate overflow
or underflow.
|=======================================================================

=== Security Manager

See <<modules-scripting-security, Scripting and the Java Security Manager>> for
details on how to customize class whitelisting.
