#
# Licensed to Elasticsearch under one or more contributor
# license agreements. See the NOTICE file distributed with
# this work for additional information regarding copyright
# ownership. Elasticsearch licenses this file to you under
# the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

#
# Painless definition file. This defines the hierarchy of classes,
# what methods and fields they have, etc.
#

class Iterator -> java.util.Iterator {
  boolean hasNext()
  def next()
  void remove()
}

class ListIterator -> java.util.ListIterator extends Iterator {
  void add(def)
  boolean hasPrevious()
  int nextIndex()
  int previousIndex()
  void set(def)
}

class Collection -> java.util.Collection extends Iterable {
  boolean add(def)
  boolean addAll(Collection)
  void clear()
  boolean contains(def)
  boolean containsAll(Collection)
  boolean isEmpty()
  boolean removeAll(Collection)
  boolean retainAll(Collection)
  int size()
  def[] toArray()
}

class List -> java.util.List extends Collection,Iterable,Object {
  void add(int,def)
  boolean addAll(int,Collection)
  def get(int)
  int indexOf(def)
  int lastIndexOf(def)
  ListIterator listIterator()
  ListIterator listIterator(int)
  def remove(int)
  def set(int,def)
  # TODO: wtf?
  int getLength/size()
  List subList(int,int)
}

class ArrayList -> java.util.ArrayList extends List,Collection,Iterable,Object {
  ArrayList <init>()
  def clone()
}

class Set -> java.util.Set extends Collection,Iterable,Object {
}

class HashSet -> java.util.HashSet extends Set,Collection,Iterable,Object {
  HashSet <init>()
  def clone()
}

class Map -> java.util.Map extends Object {
  void clear()
  boolean containsKey(def)
  boolean containsValue(def)
  Set entrySet()
  def get(def)
  def getOrDefault(def,def)
  boolean isEmpty()
  Set keySet()
  def put(def,def)
  void putAll(Map)
  def putIfAbsent(def,def)
  def remove(def)
  boolean remove(def,def)
  def replace(def,def)
  int size()
  Collection values()
}

class HashMap -> java.util.HashMap extends Map,Object {
  HashMap <init>()
}
